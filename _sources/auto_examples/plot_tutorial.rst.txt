
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_tutorial.py:


A simple tutorial on joint diagonalization
==========================================

We generate some independent signals with different powers.
The signals are then mixed, and their covariances are computed.
Joint diagonalization recovers the mixing matrix.

.. GENERATED FROM PYTHON SOURCE LINES 9-22

.. code-block:: default


    # Authors: Pierre Ablin <pierreablin@gmail.com>
    #
    # License: MIT

    import numpy as np
    import matplotlib.pyplot as plt

    from qndiag import qndiag


    rng = np.random.RandomState(0)








.. GENERATED FROM PYTHON SOURCE LINES 23-25

We take 10 different bins, and 5 sources. We generate random powers for
each source and bin

.. GENERATED FROM PYTHON SOURCE LINES 25-29

.. code-block:: default

    n_bins = 10
    n_sources = 5
    powers = rng.rand(n_bins, n_sources)








.. GENERATED FROM PYTHON SOURCE LINES 30-33

Next, we generate a random minxing matrix A, and for each bin, we generate
sources s with the powers above, and observe the signals x = A.dot(s).
We then store the covariances of the signals

.. GENERATED FROM PYTHON SOURCE LINES 33-43

.. code-block:: default


    n_samples = 100
    A = rng.randn(n_sources, n_sources)
    covariances = []
    for power in powers:
        s = power[:, None] * rng.randn(n_sources, n_samples)
        x = np.dot(A, s)
        covariances.append(np.dot(x, x.T) / n_samples)

    covariances = np.array(covariances)







.. GENERATED FROM PYTHON SOURCE LINES 44-46

We now use qndiag on 'covariances' to recover the unmixing matrix, i.e the
inverse of A

.. GENERATED FROM PYTHON SOURCE LINES 46-52

.. code-block:: default


    B, _ = qndiag(covariances)

    unmixing_mixing = np.dot(B, A)
    plt.matshow(unmixing_mixing)  # Should be ~ a permutation + scale matrix
    plt.show()



.. image:: /auto_examples/images/sphx_glr_plot_tutorial_001.png
    :alt: plot tutorial
    :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.113 seconds)


.. _sphx_glr_download_auto_examples_plot_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_tutorial.py <plot_tutorial.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_tutorial.ipynb <plot_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
